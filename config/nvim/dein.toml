[[plugins]]
repo = 'sainnhe/everforest'
hook_add = '''
let g:everforest_background = 'hard'
let g:everforest_enable_italic = 1
let g:everforest_diagnostic_text_highlight = 1
let g:everforest_diagnostic_line_highlight = 0
let g:everforest_diagnostic_virtual_text = 'colored'
'''

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
nnoremap <leader>gs <cmd>Gina status<cr>
nnoremap <leader>gb <cmd>Gina branch<cr>
nnoremap <leader>gco<space> :Gina checkout<space>
nnoremap <leader>gci<space> :Gina commit<space>
nnoremap <leader>g<space> :Gina<space>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
        \ 'colorscheme': 'everforest',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'gina#component#repo#branch'
        \ },
        \ }
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'machakann/vim-textobj-delimited'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
luafile ~/.config/nvim/rc/nvim-lspconfig.lua

augroup vimrc-lsp
  autocmd BufWritePre *.tsx lua vim.lsp.buf.formatting_seq_sync(nil, 1000, {'diagnosticls', 'tsserver'})
augroup END
'''

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# rev = 'release'
# hook_add = '''
# nmap <silent> gd <Plug>(coc-definition)
# nmap <silent> gy <Plug>(coc-type-definition)
# nmap <silent> gi <Plug>(coc-implementation)
# nmap <silent> gr <Plug>(coc-references)
#
# nnoremap <silent> K :call <SID>show_documentation()<CR>
#
# function! s:show_documentation()
#   if (index(['vim','help'], &filetype) >= 0)
#     execute 'h '.expand('<cword>')
#   elseif (coc#rpc#ready())
#     call CocActionAsync('doHover')
#   else
#     execute '!' . &keywordprg . " " . expand('<cword>')
#   endif
# endfunction
#
# autocmd CursorHold * silent call CocActionAsync('highlight')
#
# " Symbol renaming.
# nmap <leader>rn <Plug>(coc-rename)
#
# " Formatting selected code.
# xmap <leader>f  <Plug>(coc-format-selected)
# nmap <leader>f  <Plug>(coc-format-selected)
#
# xmap <leader>a  <Plug>(coc-codeaction-selected)
# nmap <leader>a  <Plug>(coc-codeaction-selected)
#
# " Remap keys for applying codeAction to the current buffer.
# nmap <leader>ac  <Plug>(coc-codeaction)
# " Apply AutoFix to problem on the current line.
# nmap <leader>qf  <Plug>(coc-fix-current)
#
# command! -nargs=0 Format :call CocAction('format')
# '''
