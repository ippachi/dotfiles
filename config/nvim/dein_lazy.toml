[[plugins]]
repo = 'kana/vim-altr'
on_map = { n = '<Plug>' }
hook_source = '''
  source ~/.config/nvim/rc/altr.vim
'''
hook_add = '''
  nmap ]t <Plug>(altr-forward)
  nmap [t <Plug>(altr-back)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = { x = '<Plug>(EasyAlign)' }
hook_add = '''
  xmap ga <Plug>(EasyAlign)
'''
hook_source = '''
  xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'vim-test/vim-test'
depends = ['vim-dispatch']
on_cmd = ['TestNearest', 'TestLast', 'TestFile', 'TestRunnerMinitest']
hook_source = '''
  source ~/.config/nvim/rc/test.vim
'''
hook_add = '''
  nnoremap <leader>tn <cmd>TestNearest<cr>
  nnoremap <leader>tl <cmd>TestLast<cr>
  nnoremap <leader>tf <cmd>TestFile<cr>
  nnoremap <leader>ts <cmd>TestSuite<cr>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = { ic = '<Plug>' }
hook_add = '''
  imap <C-j> <Plug>(eskk:toggle)
  cmap <C-j> <Plug>(eskk:toggle)
'''
hook_source = '''
  source ~/.config/nvim/rc/eskk.vim
'''

# [[plugins]]
# repo = 'kuuote/denops-skkeleton.vim'
# on_map = { ic = '<Plug>(skkeleton' }
# hook_add = '''
# imap <C-j> <Plug>(skkeleton-enable)
# cmap <C-j> <Plug>(skkeleton-enable)
# '''
# hook_source = '''
# call skkeleton#config({
#   \ 'globalJisyo': '/Users/ippachi/.local/share/skk/SKK-JISYO.L',
#   \ 'userJisyo': '/Users/ippachi/.local/share/skk/skk-jisyo'
#   \ })
# '''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = { enable = true }
}
EOF
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'BufRead'
depends = ['plenary.nvim']
hook_source = '''
lua << EOS
require('gitsigns').setup({
  current_line_blame = true
})
EOS
'''

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'vim-denops/denops-helloworld.vim'
on_source = 'denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'ddc-around', 'ddc-matcher_head', 'ddc-sorter_rank', 'ddc-nvim-lsp', 'ddc-buffer', 'deoppet.nvim']
on_event = 'InsertEnter'
hook_source = '''
call ddc#custom#patch_global('sources', ['nvimlsp', 'buffer', 'deoppet'])
call ddc#custom#patch_global('sourceOptions', {
      \   '_': {
      \     'matchers': ['matcher_head'],
      \     'sorters': ['sorter_rank']
      \   },
      \   'around': { 'mark': 'A' },
      \   'nvimlsp': {'mark': 'lsp', 'forceCompletionPattern': '\.|:|->'},
      \   'buffer': { 'mark': 'B' },
      \   'deoppet': { 'mark': 'dp' },
      \   'zsh': { 'mark': 'Z' },
      \ })
call ddc#custom#patch_global('sourceParams', {
      \ 'nvimlsp': {'useIcon': v:true},
      \ })

call ddc#custom#patch_global('filterParams', {
    \ 'buffer': {'requireSameFiletype': v:false},
    \ })
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'matsui54/ddc-buffer'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['vim-clap']
on_cmd = 'Denite'
hook_add = '''
  nnoremap <c-p> <cmd>Denite -buffer-name=files -start-filter file/rec<cr>
  nnoremap ;g <cmd>Denite -buffer-name=search -no-empty grep<cr>
  nnoremap ;w <cmd>DeniteCursorWord -buffer-name=search -no-empty grep<cr>
  nnoremap ;r <cmd>Denite -resume -buffer-name=search<cr>
  nnoremap ;v <cmd>Denite -buffer-name=files -path=~/.config/nvim file/rec<cr>
'''
hook_source = '''
  call denite#custom#var('file/rec', 'command',
  \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])

  call denite#custom#var('grep', {
          \   'command': ['rg'],
          \   'default_opts': ['-i', '--vimgrep', '--no-heading'],
          \   'recursive_opts': [],
          \   'pattern_opt': ['--regexp'],
          \   'separator': ['--'],
          \   'final_opts': [],
          \ })

  call denite#custom#filter('matcher/clap',
        \ 'clap_path', expand('~/.cache/dein/repos/github.com/liuchengxu/vim-clap'))

  call denite#custom#source('file/rec',
      \   {
      \     'matchers': ['matcher/clap'],
      \     'sorters': ['sorter/oldfiles', 'sorter/rank']
      \   }
      \ )

  call denite#custom#source('file/old',
      \   'matchers', ['matcher/clap'],
      \   'sorters', ['sorter/oldfiles']
      \ )

  call denite#custom#source('grep',
      \   {
      \     'converters': ['converter/abbr_word'],
      \     'matchers': ['matcher/regexp']
      \   }
      \ )

  call denite#custom#option('files', {
      \   'source_names': 'short',
      \   'split': 'floating',
      \   'filter_split_direction': 'floating',
      \   'vertical_preview': v:true,
      \   'floating_preview': v:true,
      \   'floating_border': 'rounded'
      \ })

  call denite#custom#option('search', {
        \ 'highlight_filter_background': 'CursorLine',
        \ 'source_names': 'short',
        \ 'filter-split-direction': 'floating'
        \ })
'''
[plugins.ftplugin]
denite-filter = '''
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
'''

denite = '''
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> r
  \ denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> h
  \ denite#do_map('restore_sources')
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
nnoremap <leader>df <cmd>Defx -toggle -split=vertical -direction=topleft -winwidth=30<cr>
'''

[plugins.ftplugin]
defx = '''
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = ['Deol']
hook_source = '''
let g:deol#shell_history_path = '~/.config/zsh/.zsh_history'
'''

[[plugins]]
repo = 'lambdalisue/edita.vim'
on_source = 'deol.nvim'

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets']
on_event = 'InsertEnter'
hook_add = '''
imap <expr><c-l>  deoppet#expandable() ?
\ "\<Plug>(deoppet_expand)" : "\<Plug>(deoppet_jump_forward)"
imap <C-k>  <Plug>(deoppet_jump_backward)
xmap <C-l>  <Plug>(deoppet_select_text)
xmap <C-x>  <Plug>(deoppet_cut_text)
'''
hook_source = '''
call deoppet#initialize()
call deoppet#custom#option('snippets',
        \ [{'path': expand('~/.config/nvim/my-snippets')}] +
        \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
        \     { _, val -> { 'path': val } }))
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
let g:lexima_accept_pum_with_enter = 0
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = ['MundoShow', 'MundoToggle']

[[plugins]]
repo = 'liuchengxu/vim-clap'
hook_post_update = 'Clap install-binary'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

[[plugins]]
repo = 'haringsrob/nvim_context_vt'
depends = ['nvim-treesitter']
on_event = 'BufRead'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['lsp_signature.nvim', 'null-ls.nvim', 'nvim-lspinstall', 'plenary.nvim']
on_ft = ['ruby', 'typescriptreact', 'typescript', 'lua']
hook_source = '''
luafile ~/.config/nvim/rc/nvim-lspconfig.lua

command! SolargraphSetting lua require('ippachi/change-solargraph')
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'

[[plugins]]
repo = 'kabouzeid/nvim-lspinstall'

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

[[plugins]]
repo = 'plasticboy/vim-markdown'
depends = ['tabular']
on_ft = ['markdown', 'vimwiki']

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = ['vim-vsnip']
on_source = 'ddc.vim'

[[plugins]]
repo = 'tpope/vim-dispatch'
